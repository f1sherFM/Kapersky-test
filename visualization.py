import json
import matplotlib.pyplot as plt
import pandas as pd
import os
import numpy as np

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
RESULTS_PATH = r".\results"

def visualize_results():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
        if not os.path.exists(RESULTS_PATH):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {RESULTS_PATH}")
            return

        # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON-—Ñ–∞–π–ª–∞
        json_files = [f for f in os.listdir(RESULTS_PATH) 
                    if f.startswith('results_') and f.endswith('.json')]
        
        if not json_files:
            print(f"‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {RESULTS_PATH}")
            return

        latest_json = max(json_files, key=lambda f: os.path.getmtime(os.path.join(RESULTS_PATH, f)))
        file_path = os.path.join(RESULTS_PATH, latest_json)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if 'articles' not in data:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'articles'")
            return

        df = pd.DataFrame(data['articles'])

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã —Å 4 –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        plt.figure(figsize=(16, 12))
        plt.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞', fontsize=16, y=1.02)

        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        plt.subplot(2, 2, 1)
        status_counts = df['status'].value_counts()
        if len(status_counts) > 0:
            colors = ['#4CAF50' if s == 'success' else '#F44336' for s in status_counts.index]
            bars = plt.bar(status_counts.index, status_counts.values, color=colors)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height} ({height/len(df)*100:.1f}%)',
                        ha='center', va='bottom')
            
            plt.title('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π', pad=20)
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')
            plt.grid(axis='y', linestyle='--', alpha=0.7)
        else:
            plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö', ha='center', va='center')
            plt.title('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π')

        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å KDE)
        plt.subplot(2, 2, 2)
        if 'success' in status_counts and 'similarity' in df.columns:
            success_df = df[df['status'] == 'success']
            if len(success_df) > 0:
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                n, bins, patches = plt.hist(success_df['similarity'], bins=15, 
                                           color='#2196F3', edgecolor='white', 
                                           density=True, alpha=0.7)
                
                # KDE –æ—Ü–µ–Ω–∫–∞
                from scipy.stats import gaussian_kde
                kde = gaussian_kde(success_df['similarity'])
                x = np.linspace(success_df['similarity'].min(), success_df['similarity'].max(), 200)
                plt.plot(x, kde(x), color='#0D47A1', linewidth=2)
                
                plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞', pad=20)
                plt.xlabel('–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞')
                plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
                plt.grid(axis='y', linestyle='--', alpha=0.7)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–µ–¥–∏–∞–Ω—É
                mean_val = success_df['similarity'].mean()
                median_val = success_df['similarity'].median()
                plt.axvline(mean_val, color='#FF5722', linestyle='--', linewidth=1.5)
                plt.axvline(median_val, color='#9C27B0', linestyle='--', linewidth=1.5)
                plt.legend(['KDE', f'–°—Ä–µ–¥–Ω–µ–µ: {mean_val:.1f}%', f'–ú–µ–¥–∏–∞–Ω–∞: {median_val:.1f}%'])
            else:
                plt.text(0.5, 0.5, '–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π', ha='center', va='center')
                plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞')
        else:
            plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ö–æ–¥—Å—Ç–≤–µ', ha='center', va='center')
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞')

        # –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω —Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        plt.subplot(2, 2, 3)
        if 'success' in status_counts and all(col in df.columns for col in ['original_length', 'lib_length']):
            success_df = df[df['status'] == 'success']
            if len(success_df) > 0:
                plt.scatter(success_df['original_length'], success_df['lib_length'], 
                           alpha=0.6, color='#009688')
                
                max_len = max(success_df['original_length'].max(), 
                             success_df['lib_length'].max())
                plt.plot([0, max_len], [0, max_len], 'r--', linewidth=1.5)
                
                # –í—ã—á–∏—Å–ª—è–µ–º R¬≤
                from sklearn.metrics import r2_score
                r2 = r2_score(success_df['original_length'], success_df['lib_length'])
                
                plt.title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞\n(R¬≤ = {r2:.2f})', pad=20)
                plt.xlabel('–î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (—Å–∏–º–≤–æ–ª–æ–≤)')
                plt.ylabel('–î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ (—Å–∏–º–≤–æ–ª–æ–≤)')
                plt.grid(True, linestyle='--', alpha=0.7)
            else:
                plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', ha='center', va='center')
                plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞')
        else:
            plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–ª–∏–Ω–∞—Ö —Ç–µ–∫—Å—Ç–∞', ha='center', va='center')
            plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞')

        # –ì—Ä–∞—Ñ–∏–∫ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        plt.subplot(2, 2, 4)
        info_text = ""
        
        if 'metadata' in data:
            info_text += f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {data['metadata'].get('generated_at', 'N/A')}\n"
            info_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {data['metadata'].get('source_csv', 'N/A')}\n\n"
        
        info_text += f"–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(df)}\n"
        info_text += f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status_counts.get('success', 0)}\n"
        info_text += f"–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {status_counts.get('error', 0)}\n\n"
        
        if 'success' in status_counts and 'similarity' in df.columns:
            success_df = df[df['status'] == 'success']
            if len(success_df) > 0:
                info_text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞:\n"
                info_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {success_df['similarity'].mean():.1f}%\n"
                info_text += f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {success_df['similarity'].median():.1f}%\n"
                info_text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {success_df['similarity'].max():.1f}%\n"
                info_text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {success_df['similarity'].min():.1f}%\n"
                info_text += f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {success_df['similarity'].std():.1f}%\n"
        
        plt.text(0.1, 0.9, info_text, ha='left', va='top', fontsize=12,
                bbox=dict(facecolor='#f5f5f5', edgecolor='#e0e0e0', boxstyle='round'))
        plt.axis('off')
        plt.title('–°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', pad=20)

        plt.tight_layout()
        plot_path = os.path.join(RESULTS_PATH, 'visual_summary_enhanced.png')
        plt.savefig(plot_path, dpi=120, bbox_inches='tight')
        plt.close()
        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {plot_path}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")

if __name__ == "__main__":
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ QT
    os.environ['QT_AUTO_SCREEN_SCALE_FACTOR'] = '1'
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {RESULTS_PATH}")
    visualize_results()
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")